   1: program GCD; 
Parser:   <program>
   2: /* A program to compute the {greatest common} of two numbers, 
   3:    i.e., the biggest number by which the two original 
   4:    numbers can be divided without a remainder. */ 
   5:  
   6: const v1 = 1071; v2 = 462; 
Parser:     <block>
Parser:       <<const decl part>>
Parser:         <<const decl>>
Parser:           <constant>
Parser:             <unsigned const>
Parser:               <number literal>
Parser:               </number literal>
Parser:             </unsigned const>
Parser:           </constant>
Parser:         </<const decl>>
Parser:         <<const decl>>
Parser:           <constant>
Parser:             <unsigned const>
Parser:               <number literal>
   7:  
   8: var res: integer; 
Parser:               </number literal>
Parser:             </unsigned const>
Parser:           </constant>
Parser:         </<const decl>>
Parser:       </const decl part>
Parser:       <var decl part>
Parser:         <var decl>
Parser:           <type>
Parser:             <type name>
   9:  
  10: function GCD (m: integer; n: integer): integer; 
Parser:             </type name>
Parser:           </type>
Parser:         </var decl>
Parser:       </var decl part>
Parser:       <func decl>
Parser:         <param decl list>
Parser:           <param decl>
Parser:             <type name>
Parser:             </type name>
Parser:           </param decl>
Parser:           <param decl>
Parser:             <type name>
Parser:             </type name>
Parser:           </param decl>
Parser:         </param decl list>
Parser:         <type name>
  11: begin 
Parser:         </type name>
  12:    if n = 0 then 
Parser:         <block>
Parser:           <statm list>
Parser:             <statement>
Parser:               <if statm>
Parser:                 <expression>
Parser:                   <simple expr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </simple expr>
Parser:                   <rel opr>
Parser:                   </rel opr>
Parser:                   <simple expr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <unsigned const>
Parser:                           <number literal>
  13:       GCD := m 
Parser:                           </number literal>
Parser:                         </unsigned const>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </simple expr>
Parser:                 </expression>
Parser:                 <statement>
Parser:                   <assign statm>
Parser:                     <variable>
Parser:                     </variable>
  14:    else 
Parser:                     <expression>
Parser:                       <simple expr>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <variable>
  15:       GCD := GCD(n, m mod n) 
Parser:                             </variable>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </simple expr>
Parser:                     </expression>
Parser:                   </assign statm>
Parser:                 </statement>
Parser:                 <statement>
Parser:                   <assign statm>
Parser:                     <variable>
Parser:                     </variable>
Parser:                     <expression>
Parser:                       <simple expr>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <func call>
Parser:                               <expression>
Parser:                                 <simple expr>
Parser:                                   <term>
Parser:                                     <factor>
Parser:                                       <variable>
Parser:                                       </variable>
Parser:                                     </factor>
Parser:                                   </term>
Parser:                                 </simple expr>
Parser:                               </expression>
Parser:                               <expression>
Parser:                                 <simple expr>
Parser:                                   <term>
Parser:                                     <factor>
Parser:                                       <variable>
Parser:                                       </variable>
Parser:                                     </factor>
Parser:                                     <factor opr>
Parser:                                     </factor opr>
Parser:                                     <factor>
Parser:                                       <variable>
  16: end; { GCD } 
Parser:                                       </variable>
Parser:                                     </factor>
Parser:                                   </term>
Parser:                                 </simple expr>
Parser:                               </expression>
Parser:                             </func call>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </simple expr>
Parser:                     </expression>
Parser:                   </assign statm>
Parser:                 </statement>
Parser:               </if statm>
Parser:             </statement>
Parser:           </statm list>
  17:  
  18: begin 
Parser:         </block>
  19:    res := GCD(v1,v2); 
Parser:       </func decl>
Parser:       <statm list>
Parser:         <statement>
Parser:           <assign statm>
Parser:             <variable>
Parser:             </variable>
Parser:             <expression>
Parser:               <simple expr>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <func call>
Parser:                       <expression>
Parser:                         <simple expr>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <variable>
Parser:                               </variable>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </simple expr>
Parser:                       </expression>
Parser:                       <expression>
Parser:                         <simple expr>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <variable>
Parser:                               </variable>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </simple expr>
Parser:                       </expression>
  20:    write('G', 'C', 'D', '(', v1, ',', v2, ')', '=', res, eol); 
Parser:                     </func call>
Parser:                   </factor>
Parser:                 </term>
Parser:               </simple expr>
Parser:             </expression>
Parser:           </assign statm>
Parser:         </statement>
Parser:         <statement>
Parser:           <proc call>
Parser:             <expression>
Parser:               <simple expr>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <unsigned const>
Parser:                       <char literal>
Parser:                       </char literal>
Parser:                     </unsigned const>
Parser:                   </factor>
Parser:                 </term>
Parser:               </simple expr>
Parser:             </expression>
Parser:             <expression>
Parser:               <simple expr>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <unsigned const>
Parser:                       <char literal>
Parser:                       </char literal>
Parser:                     </unsigned const>
Parser:                   </factor>
Parser:                 </term>
Parser:               </simple expr>
Parser:             </expression>
Parser:             <expression>
Parser:               <simple expr>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <unsigned const>
Parser:                       <char literal>
Parser:                       </char literal>
Parser:                     </unsigned const>
Parser:                   </factor>
Parser:                 </term>
Parser:               </simple expr>
Parser:             </expression>
Parser:             <expression>
Parser:               <simple expr>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <unsigned const>
Parser:                       <char literal>
Parser:                       </char literal>
Parser:                     </unsigned const>
Parser:                   </factor>
Parser:                 </term>
Parser:               </simple expr>
Parser:             </expression>
Parser:             <expression>
Parser:               <simple expr>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <variable>
Parser:                     </variable>
Parser:                   </factor>
Parser:                 </term>
Parser:               </simple expr>
Parser:             </expression>
Parser:             <expression>
Parser:               <simple expr>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <unsigned const>
Parser:                       <char literal>
Parser:                       </char literal>
Parser:                     </unsigned const>
Parser:                   </factor>
Parser:                 </term>
Parser:               </simple expr>
Parser:             </expression>
Parser:             <expression>
Parser:               <simple expr>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <variable>
Parser:                     </variable>
Parser:                   </factor>
Parser:                 </term>
Parser:               </simple expr>
Parser:             </expression>
Parser:             <expression>
Parser:               <simple expr>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <unsigned const>
Parser:                       <char literal>
Parser:                       </char literal>
Parser:                     </unsigned const>
Parser:                   </factor>
Parser:                 </term>
Parser:               </simple expr>
Parser:             </expression>
Parser:             <expression>
Parser:               <simple expr>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <unsigned const>
Parser:                       <char literal>
Parser:                       </char literal>
Parser:                     </unsigned const>
Parser:                   </factor>
Parser:                 </term>
Parser:               </simple expr>
Parser:             </expression>
Parser:             <expression>
Parser:               <simple expr>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <variable>
Parser:                     </variable>
Parser:                   </factor>
Parser:                 </term>
Parser:               </simple expr>
Parser:             </expression>
Parser:             <expression>
Parser:               <simple expr>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <variable>
Parser:                     </variable>
Parser:                   </factor>
Parser:                 </term>
Parser:               </simple expr>
Parser:             </expression>
  21: end. 
Parser:           </proc call>
Parser:         </statement>
Parser:         <statement>
Parser:           <empty statm>
Parser:           </empty statm>
Parser:         </statement>
Parser:       </statm list>
Parser:     </block>
Parser:   </program>
program gcd;
const
  v1 = 1071; 
  v2 = 462; 
var
  res: integer;

function gcd (m: integer; n: integer): integer;
begin
  if n = 0 then 
    gcd := m
  else
    gcd := gcd(n, m mod n)
end; {gcd}

begin
  res := gcd(v1, v2);
  write('G', 'C', 'D', '(', v1, ',', v2, ')', '=', res, eol);
  
end.
